include/TM2x.h:  // (n_Element + 1) in the denominator must be representable:
include/TM2x.h:  INLINE_PREFIX address_t TM2x·n_Element(TM2x·Tape *tm2x ,address_t n_Element){
include/TM2x.h:    return tm2x->byte_n/(n_Element + 1);
include/TM2x.h:  INLINE_PREFIX void *TM2x·n_Element_pt(TM2x·Tape *tm2x ,address_t n_Element){
include/TM2x.h:    return TM2x·byte_n_pt(tm2x) - n_Element;
include/TM2x.h:  #define TM2x·Element_N_Pt(tm2x ,type) TM2x·n_Element_pt(tm2x ,byte_n_of(type))
include/TM2x·DataTypes.h:    address_t *n_Element;  // extent of the array, in elements
include/TM2x·DataTypes.h:    address_t *n_Element; // extent of the element, in bytes
include/TM2x·DataTypes.h:    address_t *n_Element;
include/TM2x·DataTypes.h:    address_t *n_Element;
include/TM2x·DataTypes.h:    address_t *n_Element;
include/TM2x·DataTypes.h:  address_t n_Element;
include/TM2x·DataTypes.h:  address_t n_Element;
include/TM2x·DataTypes.h:  address_t n_Element;
include/TM2x·DataTypes.h:  address_t n_Element;
include/TM2x·DataTypes.h:  address_t n_Element;
include/TM2x·DataTypes.h:  address_t n_Element ;
include/TM2x·DataTypes.h:  address_t n_Element ;
include/TM2x·DataTypes.h:  address_t n_Element;
include/TM2x·DataTypes.h:  address_t after_n_Element;
include/TM2x·DataTypes.h:  address_t n_Element;
include/TM2xHd.lib.h:    n_Element  just after hd, and if not hd, just after tape
include/TM2xHd.lib.h:  TM2xHd·F_PREFIX SequencePtr TM2xHd·at_n_Element
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    if( hd->element_pt == TM2x·n_Element_pt(tape ,n_Element) ) continue_via_trampoline is_true;
include/TM2xHd.lib.h:  TM2xHd·F_PREFIX void TM2xHd·unguarded_step(TM2xHd *hd ,address_t n_Element){
include/TM2xHd.lib.h:    hd->element_pt += n_Element + 1;
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    continue_into TM2xHd·at_n_Element(tape ,hd ,n_Element ,&&at_n ,&&not_at_n);
include/TM2xHd.lib.h:      TM2xHd·unguarded_step(hd ,n_Element);
include/TM2xHd.lib.h:  TM2xHd·F_PREFIX void TM2xHd·read(TM2xHd *hd ,address_t n_Element ,void *dst_pt){
include/TM2xHd.lib.h:    memcpyn(dst_pt, hd->element_pt, n_Element);
include/TM2xHd.lib.h:  TM2xHd·F_PREFIX void TM2xHd·write(TM2xHd *hd ,address_t n_Element ,void *src_element_pt){
include/TM2xHd.lib.h:    memcpyn(hd->element_pt ,src_element_pt ,n_Element);
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:      continue_into TM2x·push(tape_acc ,TM2xHd·pt(hd_src) ,n_Element ,&&pw_nominal ,&&pw_allocation_failed);
include/TM2xHd.lib.h:        continue_into TM2xHd·step(tape_src ,hd_src ,n_Element ,&&loop ,&&at_n);
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,void f(void *context ,void *el ,address_t n_Element)
include/TM2xHd.lib.h:      f(context ,element_pt ,n_Element);
include/TM2xHd.lib.h:      continue_into TM2xHd·at_n_Element(tape ,hd ,n_Element ,&&hd_at_n ,&&hd_not_at_n);
include/TM2xHd.lib.h:        TM2xHd·unguarded_step(hd ,n_Element);
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,SequencePtr pred(void *context ,void *el ,address_t n_Element ,SequencePtr pred_true ,SequencePtr pred_false)
include/TM2xHd.lib.h:      continue_into pred(context ,TM2xHd·pt(hd) ,n_Element ,&&pred_true ,&&pred_false);
include/TM2xHd.lib.h:        continue_into TM2xHd·at_n_Element(tape ,hd ,n_Element ,&&at_n , &&not_at_n);
include/TM2xHd.lib.h:          TM2xHd·unguarded_step(hd ,n_Element);
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,SequencePtr pred(void *context ,void *el ,address_t n_Element ,SequencePtr pred_true ,SequencePtr pred_false)
include/TM2xHd.lib.h:      continue_into pred(context ,TM2xHd·pt(hd) ,n_Element ,&&pred_true ,&&pred_false );
include/TM2xHd.lib.h:        continue_into TM2xHd·at_n_Element(tape ,hd ,n_Element ,&&hd_at_n , &&hd_not_at_n);
include/TM2xHd.lib.h:          TM2xHd·unguarded_step(hd ,n_Element);
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,SequencePtr pred(void *context ,void *el ,address_t n_Element ,SequencePtr pred_true ,SequencePtr pred_false)
include/TM2xHd.lib.h:        ,n_Element 
include/TM2xHd.lib.h:      continue_into TM2x·push(tape_dst ,src_element_pt ,n_Element ,&&pw_wrote_it ,&&pw_alloc_failed);
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,SequencePtr pred(void *context ,void *el ,address_t n_Element ,SequencePtr pred_true ,SequencePtr pred_false)
include/TM2xHd.lib.h:          ,n_Element 
include/TM2xHd.lib.h:        continue_into TM2xHd·at_n_Element(set_src ,hd_src ,n_Element ,&&at_n , &&not_at_n);
include/TM2xHd.lib.h:          TM2xHd·unguarded_step(hd_src ,n_Element);
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,SequencePtr pred(void *context ,void *el ,address_t n_Element ,SequencePtr pred_true ,SequencePtr pred_false)
include/TM2xHd.lib.h:          ,n_Element 
include/TM2xHd.lib.h:          ,n_Element 
include/TM2xHd.lib.h:          ,n_Element 
include/TM2xHd.lib.h:          ,n_Element
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    if( memcmpn(e0 ,e1 ,n_Element) == 0 )
include/TM2xHd.lib.h:    ,address_t n_Element
include/TM2xHd.lib.h:    if( strncmpn(e0 ,e1 ,n_Element) == 0 )
include/TM2xHd.lib.h:  TM2xHd·F_PREFIX void TM2xHd·f_free(void *context ,void *element_pt ,address_t n_Element){
include/TM2xHd.lib.h:  // could improve this by getting the integer size from n_Element
include/TM2xHd.lib.h:  TM2xHd·F_PREFIX void TM2xHd·f_print_int(void *context ,void *element_pt ,address_t n_Element){
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:      scale_ext_args.a_0 = lnk->args->n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:      scale_ext_args.a_1 = lnk->args->n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:          ,.a_1 = lnk->args->n_Element
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:          ,.a_1 = lnk->args->n_Element
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:        {  .a_0 = lnk->args->n_Element
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:          ,.a_1 = lnk->args->n_Element
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  address_t n_Element = Args.TM2x·index·to_pt.n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  inclusive·mul_ext·args.bn = n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:   address_t n_Element  = Args.TM2x·pop.n_Element; 
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  address_t n_Element       = Args.TM2x·push_elements.n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  address_t n_Element  = Args.TM2x·push_elements.n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:    address_t n_Element   = Args.TM2x·push.n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  address_t n_Element   = Args.TM2x·read_pop.address_t n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  address_t after_n_Element = Args.TM2x·resize_elements.after_n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  address_t n_Element  = Args.TM2x·resize_elements.n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  inclusive·mul_ext·args.an = after_n_Element;
include/TM2x·Text.h.~2a3bbfe889c5c008a5bc421409ee473d4b525609~:  inclusive·mul_ext·args.bn = n_Element;
include/TM2x·Text.h:      scale_ext_args.a_0 = lnk->args->n_Element;
include/TM2x·Text.h:      scale_ext_args.a_1 = lnk->args->n_Element;
include/TM2x·Text.h:          ,.a_1 = lnk->args->n_Element
include/TM2x·Text.h:          ,.a_1 = lnk->args->n_Element
include/TM2x·Text.h:        {  .a_0 = lnk->args->n_Element
include/TM2x·Text.h:          ,.a_1 = lnk->args->n_Element
include/TM2x·Text.h:  address_t n_Element = Args.TM2x·index·to_pt.n_Element;
include/TM2x·Text.h:  inclusive·mul_ext·args.bn = n_Element;
include/TM2x·Text.h:   address_t n_Element  = Args.TM2x·pop.n_Element; 
include/TM2x·Text.h:  address_t n_Element       = Args.TM2x·push_elements.n_Element;
include/TM2x·Text.h:  address_t n_Element  = Args.TM2x·push_elements.n_Element;
include/TM2x·Text.h:    address_t n_Element   = Args.TM2x·push.n_Element;
include/TM2x·Text.h:  address_t n_Element   = Args.TM2x·read_pop.address_t n_Element;
include/TM2x·Text.h:  address_t after_n_Element = Args.TM2x·resize_elements.after_n_Element;
include/TM2x·Text.h:  address_t n_Element  = Args.TM2x·resize_elements.n_Element;
include/TM2x·Text.h:  inclusive·mul_ext·args.an = after_n_Element;
include/TM2x·Text.h:  inclusive·mul_ext·args.bn = n_Element;
test/TM2x·test_1.h:      address_t n_Element = 9;
test/TM2x·test_1.h:      address_t n_Element = 3; // extent of 32 bit int in elements
test/TM2x·test_1.h:      ce_args.n_Element = &n_Element;
test/TM2x·test_1.h:      ce_args.n_Element = &n_Element;
test/TM2xHd·test.c:void TM2xHd·f0(void *context ,void *item_pt ,address_t n_Element){
test/TM2xHd·test.c:  ,address_t n_Element 
test/TM2xHd·test.c:  ,address_t n_Element 
test/TM2xHd·test.c:  ,address_t n_Element 
test/TM2xHd·test.c:  ,address_t n_Element 
test/TM2xHd·test.c:  ,address_t n_Element 
