
These are the operations we go through when using an array:

  1. Allocate

    Allocation of memory to be used for the header.  Attotw, our header structure consists
    of two pointers, one to the base of the array, and one with the index to the last
    byte.  After allocation these are uninitialized.

  2. Construct

    Initializes the array header. Also, typically, sets the initial data.

  3. Destruct
  4. Deallocate

Due to these operations an array may be found to be in one of the following states (*):

  1. Conceptual

     A variable name exists, but it has not been allocated.

  2. Partial

     Allocated but not constructed. Waiting to be constructed so that it may be used.

     The array header has been allocated, but its data pointer and max index
     fields have either not been initialized, or the array has been destructed.

  3. Constructed


Here is state diagram:

       |<---deallocate------------
       |                          |
   [Conceptual] --allocate--> [Partial] --construct--> [Constructed]
                                 |                           |
                                 |<-----------------destruct--


An array in the Partial or Constructed state is also said to be Allocated. Conceptual and
Partial arrays have not been constructed yet. Only arrays in the [Constructed] state
may be used.  After destruction our arrays can be constructed again and reused.

So given this situation, what does it mean for an array to be 'empty'?  Perhaps you would
like it to mean that the array has been constructed and is ready to use, but has zero
elements of data allocated. I.e. if we checked the length of the array we would find it to
be zero. As we found in the TTCA this sort of thing would be a second level construct. And
note, for such an array it would be an error to talk about its maximum index.

In our array, to initialize the last byte index field of the header, the array must have
at least one element at the time of construction. In some implementations of malloc, it is
also the case that the array must have at least one element in order for a block to be
allocated on the heap for the array. Hence, construction for an empty array, if it was
possible, would be completely different than that of construction of an array that has at
least one element.  And furthermore, and this is the kicker, the normal construction would
still be required when a first element is added. I.e. we can see in practice how we are
forced to make emptiness a second level construct. (**)

There are three states for our array: Conceptual, Partial, Constructed. A Constructed array
has at least length of 1.  Both a Conceptual array and a Partial array have no elements,
and in this sense, then, arrays in those states may be said to be Empty. Before an empty
array may be used, it must be constructed.

We already ran into this issue in the theoretical discussion on emptiness.  We noted the
implications and the fundamental nature then of the first/extend loop structure.  We
handle emptiness the same way here.  For example, when a dynamic array is used as a stack,
the first push onto the array of the stack goes through 'first' code, and later pushes go
through 'extend' code.  In order to facilitate first/extend patterns I have adopted a
programming style of lambda continuations.


---------------------------------------------------------------------------------------

*
I toyed with calling Construct either 'Initialize', 'Format', or even 'Mount' instead.
'Initialize' was intended to mean 'initialize the header struct'.  However, we also have
data fields to be initialized. It seems better to leave this term to apply generally to a
first write to allocated memory.  'Format' and 'Mount' extend the tape machine analogy.
Mounting an empty tape is fairly common, and after mounting an empty tape one must format
it.  Hence, 'Mount' is the Allocation operations not the construction operation.  'Format'
is correct, and I had it in the code, but it does not have a nice inverse term.
'Construct' means to format and possibly write some initial data, and that is what our
constructor functions do.

**
There is a more detailed discussion of the implementation issues related to empty array
implementation in the file docÂ·empty_discussion_empty_addendum.txt.
