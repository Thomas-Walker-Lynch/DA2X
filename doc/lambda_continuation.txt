--------------------------------------------------------------------------------

The caller defines pt after taking the address of a pointer:

    #define pt      (void **)&after_base_pt

The continuation then redundantly dereferences pt.  We can only hope that the optimizer
catches that and removes the redundant code.

  CLib·mallocn:{
    if( n == address_t_n ) continue_from fail;
    *pt = malloc(n+1);
    if(!*pt) continue_from fail;
    continue_from nominal;
    cend
  }

So why is it done this way?  The reason is that the same code can be used with operands
passed in.

  #define S0(x) CLib·mallocn· ## x

  struct{
    void **pt;
    address_t n;
    continuation nominal;
    continuation fail;
  }S0(args);

  #undef S0

Presumably the value of pt in this struct can be changed depending on the origin of the
continuation.  As the same code may be #included into multiple places we must prepare
pt as a void **.

But why have more than once copy of a continuation?  It is not necessary.  The reason
to have more than one copy of a continuation for inlining the code for efficiency.
The inlined version can be optimized against the use of variables in the local scope, and
some branches might become redundant.  Enabling such optimization is why the #defines
are supported for the operands.

--------------------------------------------------------------------------------
Where to put continuations

lambda continuation is a redundant term, it came about due to the transition from functions,
to functions that take lambdas, to lamdas that do not return (but continue).  Also the
conventional use of the term continuation seems to be that of running a lambda?   I will now
just use the term 'continuation'.

Continuations placed at global scope are not thread safe.  This is due to the sharing of
the args struct and local variables struct between the threads.  If instead we place all
the continuations in the main() function, then they are thread safe, as each thread has
its own stack, so each thread will be given cloned copies of its own args and local variable
structs when it is made.

Continuations may also be placed at lower scopes as a kind of inlining technique.  The
related continuations will have to be declared (makes use of a gcc extension) so that the
labels with the outerscope will not be conflated.  We facilitate the embedding of
continuations in this manner with the #define preface that defines shared variables.
Also, the compiler optimization may remove unusued fields from the args and local variable
structs.  A smarter optimizer might recognize that the write through on the args struct
and eliminate the redundant assignments.  I do not know if this is done.  In any case with
the #define of args to local variables we get closer to how lambdas should be implemented
when they become available.

--------------------------------------------------------------------------------
continuation embedding in library routines

For the TM library I have lower scope embedded calls to other continuations.  This
is for performance reasons.  For exmaple, the alloc_heap call embeds mallocn rather
than continuing from a higher level instance of it.  Both calls pretty much reduce
to malloc, so the higher level call would not save much code space if any.  Other
continuations in the library could be given alternative impelementations that call
rather than embed, this would result in a more compact library.


--------------------------------

The example-pound-define-lambdas branch implements redefinition of argument variables
names in continuations performed by #include for the first few functions in the former
TM2x.lib.h.  With this method a parent continuation can share variables with child
continuations. We achieve true usage of variables in scope through the continuation
call.

The code is pretty, but the the lack of functionality in the cpp macro language combined
with the lack of namespace structures conspired to cause a lot of typing and very long
names for arguments and local variables in the continuations. Also, because #define names
must be constant identifiers, and #defines have file scope, but our continuations (thanks
to the gcc extension for scoped labels) are scoped.  Thus there can be collisions between
#define names. 

** .. wouldn't it be so nice to have a locally scoped pound define? One that
tracked braces, could shadow a value at a higher scope, and goes out of scope at the
closing brace?  Scopied pound define would solve the name space problem. Static Lexical
scoping through braces is scannable by the cpp. Also need that the #def name expands
embeded macros so that it may be name scoped.  #def eval(CAT(NS2,begin)) 5 or some such.
Note that #define macros may have unbalanced braces in them, so they tracking of
scope braces would have to be after macro expansion.

Hence, I am going to move to a model where continuations always read their arguments from
a partner struct. I will rely upon the compiler's optimizer to recognize the redundant use
of the struct and to clean things up.

------------------------
should mention re-entrance is not an issue because continuations do not return.
