
This file contains scratch notes on the first-rest loop form.  I use the terminology of
first-extend, because the first code block adds a first item to an output list, and then
the rest code block makes that output longer, i.e. it extends it.  This suggests that all
values that we see are potentially extendable into lists.

The C language already has this built in to pointers, as all pointers which point at
values could be pointers that point at an array base.  Of course there are memory
allocation issues related to extending a value into an array in C.  Typically a program
would write over neighboring memory if the program was initially written in a manner that
a pointed out value was just a single value, but then the program treated it instead like
the first element of an array.  However, our dynamic array implementation takes care of
that allocation issue, so the first-extend pattern is valid.

//--------------------------------------------------------------------------------
// basic first extend form example

This example comes from an older version of the 'intersection' iterator of TM2xHd.

All initialized tapes have at lest one value by this first-extend technique, so we
enter the 'first' block uses do{}while().  We do not know if we will extend
the output tape, so the 'extend' block is guarded by a test with a while(){}; form.

When leaving the first-extend form, we must check the 'found_first' flag to know if the
output tape (here 'set_c') was written.

    // first
    bool found_first = false;
    do{
      void *a_element_pt = TM2xHd_pt(hd_a);
      found_first = TM2xHd_exists(set_b ,hd_b ,element_byte_n ,a_element_pt ,pred);
      if( found_first ){
        TM2x_write_init(set_c ,a_element_pt ,element_byte_n);
        break;
      }
      if( !TM2xHd_unguarded_step(set_a ,hd_a ,element_byte_n) )
        break;
      TM2xHd_rewind(set_b ,hd_b);
    }while(true);
    if( !found_first ) return false;

    // extend
    while(TM2xHd_unguarded_step(set_a ,hd_a ,element_byte_n)){
      a_element_pt = TM2xHd_pt(hd_a);
      TM2xHd_rewind(set_b ,hd_b);
      if(TM2xHd_exists(set_b ,hd_b ,element_byte_n ,a_element_pt ,pred)){
        TM2x_push_write(set_c ,a_element_pt ,element_byte_n);
      }
    }
    return true;

We could have instead nested the extension code.

    // search for first, nested extension
    do{
      void *a_element_pt = TM2xHd_pt(hd_a);
      found_first = TM2xHd_exists(set_b ,hd_b ,element_byte_n ,a_element_pt ,pred);
      if( found_first ){
        TM2x_write_init(set_c ,a_element_pt ,element_byte_n);
        // extend
        while(TM2xHd_unguarded_step(set_a ,hd_a ,element_byte_n)){
          a_element_pt = TM2xHd_pt(hd_a);
          TM2xHd_rewind(set_b ,hd_b);
          if(TM2xHd_exists(set_b ,hd_b ,element_byte_n ,a_element_pt ,pred)){
            TM2x_push_write(set_c ,a_element_pt ,element_byte_n);
          }
        }
        break;
      }
      if( !TM2xHd_unguarded_step(set_a ,hd_a ,element_byte_n) )
        break;
      TM2xHd_rewind(set_b ,hd_b);
    }while(true);
    return found_first;
  }

Both forms are similar.  The major difference is that in the nested form the extension
code appears where the first break appears in the serial form.

//--------------------------------------------------------------------------------
//  first extend from the tranche options parser

This is another example from the tranche options parser.

    char **pt = argv + 1; // skip the command name
    bool found_first = false;
    while(*pt){
      if(found_first_arg = !is_option(pt)) break;
      process_option(&pt ,&err);
      pt++;
    }
    if( found_first_arg ){
      TM2x_write(srcs ,0 ,*pt);
      // extend
      pt++;
      while(*pt){
        if( is_option(pt) ) process_option(&pt ,&err ,tdir);
        else TM2x_Push_Write_Not_Exists(srcs ,*pt ,TM2xHd_pred_cstring_eq);
        pt++;
      }
      break;
    }
    if(err){
      fprintf(stderr, "usage: %s [<src_file_path>].. [-tdir <dir>]\n", argv[0]);
      return err;
    }
    // not an error, but without source files there is nothing to do, so we just return
    if(!found_first_arg){
      return 0;
    }

I could have shorted this a bit but I wanted to report option errors even when there are no
source files given:

    char **pt = argv + 1; // skip the command name
    bool found_first = false;
    while(*pt){
      if(is_option(pt)){
        process_option(&pt ,&err);
        pt++;
      }else
        break;
    }
    if( !*pt ) return 0;
    TM2x_write(srcs ,0 ,*pt);
    // extend
    pt++;
    while(*pt){
      if( is_option(pt) ) process_option(&pt ,&err ,tdir);
      else TM2x_Push_Write_Not_Exists(srcs ,*pt ,TM2xHd_pred_cstring_eq);
      pt++;
    }

//--------------------------------------------------------------------------------
// generalizing the loop structure
//

Here hd is on the source tape, and we write our results to the destination tape.

There are two main exits from the first-extend form:

  1) never_one:  is_one(hd) never returned true before the source was exhausted. The
     destination tape was not initialized.

  2) end: is_one(hd) was true at least once, the destination was initialized and has at
     least one value.

In both cases the source iterator is left at the end of the tape.

    // first block
    do{
       if( is_one(hd) ) init(destination ,hd); break;
       if( at_element_n(hd) ) goto never_is_one;
       unguarded_step(hd)
    }while(true);

    // extend block
    while(!at_element_n(hd)){
       unguarded_step(hd)
       if( is_one(hd) ) extend(hd);
    }
    end:;
    never_is_one:;

The functions: is_one(), unguarded_step(), and at_element_n() are used both by the first and extend blocks.

The function init(destination ,hd) is unique to the first block.

The function extend(destination ,hd) is unique to the extend block.


//--------------------------------------------------------------------------------
// Using continuations instead of bool flags
//

With continuations as described in my book, we do not return from function calls.  Instead
we pass in as operands one or more continuation functions to be used. Then in a multithreading
environment, we might enter the function and then take multiple continuations as exits.  In
single threaded code we will always follow exactly one of the continuations as an exit.  We
have no separate error processing system, rather error conditions cause the code to use
different continuations.  Thus all functions and their behaviors are fully specified.  We
often call the continuation functions passed in 'lambdas' as that is the language feature
often used to create them.

I can adopt a trampoline style to support multiple continuations in C by using trampolines.

Using a trampoline and labels for lambdas does relieves us from having to send in closures.  When
the function returns with the continuation pointer, the trampoline is already in the callers
scope and can see all the variables the caller could.  It is almost too natural.

I wonder if we can use labels in a more general way as lambdas instead of mixing them with
function calls. To do that we would need to have pack operands into a unique frame given
upon the call. Actually gcc already has an extension for nested functions.  The only
drawback with nested functions is that they can not be inlined.  I wonder if the optimizer
is smart enough to split apart such reused code and make multiple copies.

--------------------------------------------------------------------------------
2020-07-08T16:19:13Z

All the labeled code sequences have access to all variables in scope. In this regard labeled
code sequences resemble lambdas with closures.

I add these definitions to gives us a continuation semantic:
  #define continue_into goto *
  #define continue_from return
  #define continue_from_local goto
  typedef void **continuation;

I also replaced the Boolean tests with functions that follow one of two continuations,
one for the true case, another for the false case.

C labels must always be followed by a statement.  The compiler throws errors if it sees
such things as the common case where a declaration would naturally follow a label.  A
single semicolon is a statement, so I just put both the colon and a semicolon after the
labels.

Now it looks like lambdas and continuations, but it is really labels and gotos.

The first-extend loop now looks like:

  first:;
    continue_into is_one(hd ,&&is_one ,&&not_one);
      is_one:;
        write_init(output ,hd);
        continue_from_local extend;
      not_one:;
        continue_into at_element_n(hd ,&&at_n  ,&&not_at_n);
          at_n:;
            continue_from <not_found>
          not_at_n:;
            unguarded_step(hd);
            continue_from_local first;

  extend:;
    continue_into at_element_n(hd ,&&at_n ,&&not_at_n);
      at_n:;
        continue_from <done>
      not_at_n:;
        unguarded_step(hd);
        continue_into is_one(hd ,&&is_one ,&&not_one);
          is_one:;
            write_extend(output ,hd)
          not_one:;
            continue_from_local extend;


Schematically it looks like this:

   first:; is_one:; init extend:; at_n:; <done>
           |                      |
           |                      not_at_n:; step is_one:; write_extend extend
           |                                      |
           |                                      not_one:; extend
           not_one:; at_n:; <not_found>
                     |
                     not_at_n:; step first

As of this date, I have converted the  dynamic array code to use continuations via labels and
trampoline.

If we could have a language statement for this form, perhaps it would be something like:

   hd -> <not_found> ,<done>
     if( is_one ) init ,extend;
     if( !at_element_n ) step;

or perhaps

   LP {
     if( is_one() ) init(); extend();
     if( at_element_n ) <done> else unguarded_step();
     <not_found>
     }

as a macro:

   #define LP( is_one ,init ,extend ,at_element_n ,step, done ,not_found )

It would be awful to pass that much code as macro arguments. Perhaps I can add a this loop
to the tranche macro pre-processor, but then we quickly get into the preprocessor having
to be aware of contexts so as to make up namespaced labels that do not collide ...

...

  first: if( is_one(hd) ) write_init(output ,hd); else <not_found>
  extend: if( is_one(hd) ) push_write(output ,hd);
  iterator: if( at_element_n(input ,hd) ) <done> else unguarded_step(hd);

This is not a very good language statement because is_one appears twice, so we can not just have
anonymous code in braces for it.

...
  write_if: is_one(hd) | <not_found>
  first: write_init(output ,hd)
  extend: push_write(output ,hd)
  iterator: if( at_element_n(input ,hd) ) <done> else unguarded_step(hd);

  write: is_one(hd) | <not_found>
  first: write_init(output ,hd)
  extend: push_write(output ,hd)
  iterator: at_element_n(input ,hd) && <done> | unguarded_step(hd)


--------------------------------------------------------------------------------

  first:;

    continue_into is_one_q(hd ,&&is_one ,&&not_one);

      is_one:;
        write_init(output ,hd);
        continue_into at_element_n(hd ,&&at_n ,&&not_at_n);
          at_n:;
            continue_from <done>
          not_at_n:;
            unguarded_step(hd);
            continue_into is_one_q(hd ,&&is_one ,&&not_one);
              is_one:;
                write_extend(output ,hd)
              not_one:;
                continue_from_local extend;

      not_one:;
        continue_into at_element_n(hd ,&&at_n  ,&&not_at_n);
          at_n:;
            continue_from <not_found>
          not_at_n:;
            unguarded_step(hd);
            continue_from_local first;


//-------------------------------------------------------------------------------
// instead of first-extend as separate loops, suppose they are one loop where
// we simply change the write function:


1. change the write function directly

  write = write_init
  loop:;
      continue_into is_one_q(hd ,&&is_one ,&&not_one);
      is_one:;
        (*write)(output ,hd);
        write = write_extend; // this assignment will be repeated redundantly
      not_one:;
        continue_into at_element_n(hd ,&&done  ,&&not_at_n);
          not_at_n:;
            unguarded_step(hd);
            continue_from_local loop;
  done:;

  if(write == write_init) then not initialized


A possible drawback of changing the write function directly is that the write function
is sometimes a simple piece of code, and we would be adding call overhead to it.  The
use of the function pointer will assure that the compiler does not inline it.

2. change the 'when_found' target.

  when_found = &&is_one_init;

  work:;
      continue_into is_one_q(hd ,when_found ,&&step);

      is_one_init:;
        write_init(output ,hd);
        when_found = &&is_one_extend;
        continue_from_local step;

      is_one_extend::
        write_extend(output ,hd);
        continue_from_local step;

  step:;
    continue_into at_element_n(hd ,&&done  ,&&not_at_n);
      not_at_n:;
        unguarded_step(hd);
        continue_from_local work;

  done:;
  if(when_found == is_one_init) then not initialized

This continuation tree has the advantage that each called function appears only once, so a
program can type it out without having to type the same code twice.


//-------------------------------------------------------------------------------
// a real continuation tree ..
//

  The #defines and the trampoline make the loop form #2 above read like it is a
  continuation tree. The functions and trampolines provide namespace partitioning for the
  code. However they also incur call overhead.  C, nor gcc, allow an anonymous function to
  be created from a code block and passed in, so the forced step of defining things such
  as the is_one_q as a separate function is a bit awkward.

  The function call with trampolines incur call overhead. The overhead is pretty high if the
  is_one_q test ends up being something like an integer equality test.

  We probably should not just pass continuations into functions because the stack will grow as
  it would for recursive call code. That sort of thing might be expected in LISP, but it
  runs counter to the point of our continuations.  I did this for the LISP examples, but then
  again, that was LISP.

  I wonder if the trampolines and functions could be removed from the above loop, and we
  just use labels. Labels are also a bit messy, because they do not nest in scope.  Within
  a single function their names must be unique.  That makes the function the namespace
  entity.

  Suppose that continue_from here is the same as continue_from_local above.  Suppose
  that a continuation function is a label followed by code.  The closure consists
  of the variables on the stack inside the function there this occurs.

  when_found = &&init;

  is_one:;
    if( <is_one test> )
      continue_from *when_found;
    else
      continue_from step;

  init:;
    <write_init code>
    when_found = &&extend;
    continue_from step;

  extend::
    <write_extend code>
    continue_from step;

  step:;
    continue_into step(hd ,&&is_one, &&done)

  done:;
  if(when_found == is_one_init) then not initialized

Now that there is no annoying duplicate code to type, it might be reasonable for a programmer
to just type this loop form in directly.

----
  is_one -> [when_found]
  |             |
  |             -----> init
  |             |
  |             -----> extend
  |
  -------------------> step

  init -> step

  step -> is_one
  |
  ------> done

-----

Step can be pulled back in:

  when_found = &&init;

  is_one:;
    if( <is_one test> )
      continue_from *when_found;
    else
      continue_into step(hd, &&done ,&&is_one);

  init:;
    <write_init code>
    when_found = &&extend;
    continue_into step(hd, &&done ,&&is_one);

  extend:;
    <write_extend code>
    continue_into step(hd, &&done ,&&is_one);

  done:;
  if(when_found == is_one_init) then not initialized





//-------------------------------------------------------------------------------
// continuations and classes
//

  1. continued function is a code sequence

  So in C I defined a continued function, or a 'continuation' for short as
  a labeled sequence of instruction that exits through a continue_from call.
  For example, the 'init' continuation:

    init:;
      write_init(output ,hd);
      when_found = &&extend;
      continue_from_local step;

  Note that a continuation does not return to its caller.  Rather it continues with a
  further continuation. There may be one or more possible further continuations. The
  further continuation is chosen by the control structures of the code. In this
  example we show only one futher continuation, and it is a constant. Each further
  continuation is either built in as a constant, passed in as an operand, or
  gotten from the context.

  2. operand passing

    Continuations can get their operands from the context, as is done in the example above,
    and is done in the first_extend form - or from an operand structure. We may declare the
    operand structure directly above the continuation. Continuations may also have local
    data.  Here is a hypothetical 'is_one' continuation.

      struct is_one_args{
        TM2xHd *hd;
        continunation found;
      }is_one_args;

      struct is_one_data{
      }is_one_data;

      is_one_entry:;
        if( TM2xHd_Read_Exp(is_one_operands.hd) > 10 ){
          continue_from *(is_one_operands.found);
        else
          step_entry_operands.hd = hd;
          continue_from step_entry;

    Currently our is_one just takes the found operand from the context, but
    it would more conceptually elegant if it were passed in as an opreand
    as shown here.

    Note, that a continuation does not have a return statement. A continuation always ends
    with another continuation.  Because a continuation does not return, there is no reason
    to preserve data for it on a dedicated stack frame. This also means that no data to be
    used by the continuation in the future will be overwritten by reusing the operand
    structure (of course unless that operand is still being used locally).  Hence we may
    pass an operand simply by write it into the structure dedicated to operands found
    just above the entry label.

    Having structures dedicated to the continuation provides a namespace for the
    operands and for local data.  This helps programmers read the code.  Logically,
    however, apart from possible name collisions, the fields of those structures
    could have been placed in the context (the outer scope).  

  3. classes
    
    We may create a class from our continuations by placing them inside of a function
    call.

    continuation employee_info(continuation method ,void *data){

      continue_from_local method;

      continuation_methods ...

    }

    However, but then how do we make the method address available to the function caller?


  4. multi-threading

    Each thread has its own stack.  Hence if continuations are placed inside of a
    function, then each thread will see its local copy of the operand and data structs,
    so the multiple threads, even with multiple futher continuations taken, works.

characters for C identifiers .. something for keeping namespaces separate
getting addresses for gotos inside of functions, use switch statements?  Would the
opimizer clean it up? .. maybe not because it would go across function call boundaries, but
in cases everything is in one file?
